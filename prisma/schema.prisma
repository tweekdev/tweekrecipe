// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}

model User {
  id        String              @id @default(cuid())
  name      String?
  firstName String?             @map(name: "first_name")
  lastName  String?             @map(name: "last_name")
  email     String              @unique
  password  String
  phone     String?
  address   String?
  geoLat    Float?              @map(name: "geo_lat")
  geoLon    Float?              @map(name: "geo_lon")
  role      Role                @default(USER)
  createdAt DateTime            @default(now()) @map(name: "created_at")
  updatedAt DateTime            @updatedAt @map(name: "updated_at")
  image     String?
  accounts  Account[]
  sessions  Session[]
  recipes   Recipe[]
  tokens    VerificationToken[]

  @@map(name: "users")
}

model Recipe {
  id              String       @id @default(cuid())
  name            String
  image           String?
  createdAt       DateTime     @default(now()) @map(name: "created_at")
  updatedAt       DateTime?    @updatedAt @map(name: "updated_at")
  cuisine         String?
  instructions    String[]
  preparationTime Int?         @map(name: "preparation_time")
  behaviour       String?
  breed           String?
  weight          Float?
  birthday        DateTime?
  note            String?
  user            User?        @relation(fields: [userId], references: [id])
  userId          String
  ingredients     Ingredient[]

  @@map(name: "recipes")
}

// Définition du modèle d'ingrédient
model Ingredient {
  id       Int    @id @default(autoincrement())
  nom      String
  quantite String
  recipeId String @map(name: "recipe_id")
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

enum Role {
  USER
  ADMIN
}
